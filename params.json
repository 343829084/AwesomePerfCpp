{
  "name": "Awesome Perf Cpp",
  "tagline": "A curated list of awesome C/C++ performance resources: talks, articles, books, libraries, tools libraries, sites. Inspired by awesome.",
  "body": "\r\n##Contents\r\n* [Talks](#Talks)\r\n* [Articles](#articles)\r\n* [Sites/Blogs](#sitesblogs)\r\n* [Tools](#tools)\r\n* [Libraries](#libraries)\r\n* [Books](#books)\r\n* [About](#about)\r\n\r\n##Talks\r\n\r\n* ACCU 2016 ['Fastware' - Andrei Alexandrescu](https://www.youtube.com/watch?v=AxnotgLql0k)\r\n\r\n\r\n* C++Now 2016 [Timur Doumler: C++ Performance in Practice: Align, Vectorise, Cache, Jump!](https://www.youtube.com/watch?v=c-hZpChQKe0) ([slides](https://github.com/boostcon/cppnow_presentations_2016/blob/master/03_friday/cpp_performance_in_practice_align_vectorise_cache_jump.pdf))\r\n* C++Now 2016 [David Stone: Exceptional Performance](https://www.youtube.com/watch?v=0_FQIDEf7_Q)\r\n* C++Now 2016 [Jason Turner: Practical Performance Practices](https://www.youtube.com/watch?v=lNnBExDoNSQ)\r\n\r\n\r\n* code::dive conference 2014 [Scott Meyers: Cpu Caches and Why You Care](https://www.youtube.com/watch?v=WDIkqP4JbkE)([slides](http://www.aristeia.com/TalkNotes/codedive-CPUCachesHandouts.pdf))\r\n* code::dive conference 2015 [Andrei Alexandrescu - Writing Fast Code I](https://www.youtube.com/watch?v=vrfYLlR8X8k) ([slides](http://codedive.pl/wp-content/uploads/2016/01/FastCode-handouts.pdf))\r\n* code::dive conference 2015 [Andrei Alexandrescu - Writing Fast Code II](https://www.youtube.com/watch?v=9tvbz8CSI8M) ([slides](http://codedive.pl/wp-content/uploads/2016/01/FastCode-handouts.pdf))\r\n\r\n\r\n* CppCon 2014 [Andrei Alexandrescu \"Optimization Tips - Mo' Hustle Mo' Problems\"](https://www.youtube.com/watch?v=Qq_WaiwzOtI)\r\n* CppCon 2014 [Mike Acton \"Data-Oriented Design and C++\" ](https://www.youtube.com/watch?v=rX0ItVEVjHc)\r\n* CppCon 2014 [Chandler Carruth \"Efficiency with Algorithms, Performance with Data Structures\"](https://www.youtube.com/watch?v=fHNmRkzxHWs)\r\n* CppCon 2015 [Chandler Carruth, \"Tuning C++: Benchmarks, and CPUs, and Compilers! Oh My!\"](https://www.youtube.com/watch?v=nXaxk27zwlk)\r\n* CppCon 2015 [Bryce Adelstein-Lelbach “Benchmarking C++ Code\"](https://www.youtube.com/watch?v=zWxSZcpeS8Q)\r\n\r\n\r\n* Going Native 2013 - [Andrei Alexandrescu, Writing Quick Code in C++, Quickly](https://www.youtube.com/watch?v=MvFj8qo1iuA)\r\n\r\n\r\n* Meeting C++ 2015 [Understanding Compiler Optimization - Chandler Carruth - Opening Keynote](https://www.youtube.com/watch?v=FnGCDLhaxKU)\r\n\r\n##Articles\r\n \r\n* [Three Optimization Tips for C++](https://www.facebook.com/notes/facebook-engineering/three-optimization-tips-for-c/10151361643253920/), by Andrei Alexandrescu, @Facebook Engineering\r\n* [why GNU grep is fast](https://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html)\r\n* [Hash Functions all the way down](http://aras-p.info/blog/2016/08/02/Hash-Functions-all-the-way-down/) from Aras-P, and the follow up [here](http://aras-p.info/blog/2016/08/09/More-Hash-Function-Tests/)\r\n* [Why do CPUs have multiple cache levels?](https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels/)\r\n* [ETW Central](https://randomascii.wordpress.com/2015/09/24/etw-central/) - by RandomASCII\r\n* [Micro benchmarking libraries for C++ ](http://www.bfilipek.com/2016/01/micro-benchmarking-libraries-for-c.html) - on Bartek's blog\r\n* [How to start with Software Optimization](http://www.bfilipek.com/2014/07/flexible-particle-system-how-to-start.html), from Flexible Particle Experiments series, Bartek's blog.\r\n* [Taking advantage of cache coherence in your programs](http://supercomputingblog.com/optimization/taking-advantage-of-cache-coherence-in-your-programs/)\r\n* [Gallery of Processor Cache Effects, C#](http://igoro.com/archive/gallery-of-processor-cache-effects/)\r\n* [How We Beat C++ STL Binary Search](https://realm.io/news/how-we-beat-cpp-stl-binary-search/)\r\n* [C++ benchmark – std::vector VS std::list VS std::deque](http://baptiste-wicht.com/posts/2012/12/cpp-benchmark-vector-list-deque.html)\r\n* [Container Study](http://www.joshbarczak.com/blog/?p=525)\r\n* [Associative-Container Performance Tests](https://gcc.gnu.org/onlinedocs/libstdc++/ext/pb_ds/assoc_performance_tests.html)\r\n\r\n##Sites/Blogs\r\n\r\n* [Agner`s CPU blog](http://www.agner.org/optimize/blog/)\r\n* [Agner's Software optimization resources](http://www.agner.org/optimize/)\r\n* [The ryg blog](https://fgiesen.wordpress.com/)\r\n* [Random ASCII](https://randomascii.wordpress.com/)\r\n* [The Every Computer Performance Blog](https://rwwescott.wordpress.com/)\r\n* [The Supercomputing Blog](http://supercomputingblog.com/)\r\n* [Daniel Lemire's blog](http://lemire.me/blog/)\r\n* [Bartek's programming blog](http://www.bfilipek.com)\r\n\r\n##Tools\r\n\r\n###Free\r\n\r\n* [AMD Code XL](http://developer.amd.com/tools-and-sdks/opencl-zone/codexl/)\r\n* [Very Sleepy](http://www.codersnotes.com/sleepy/)\r\n* [Proffy](http://www.pauldoo.com/proffy/)\r\n* [Windows Performance Toolkit - XPERF](https://msdn.microsoft.com/en-us/library/hh162945.aspx)\r\n* [Performance and Diagnostic Tools in Visual Studio 2015](https://msdn.microsoft.com/en-us/magazine/dn973013.aspx)\r\n* [Valgrind](http://valgrind.org/)\r\n* [TAU Performance System](http://www.cs.uoregon.edu/research/tau/home.php)\r\n* [Google Performance Tools (gperftools)](https://github.com/gperftools/gperftools)\r\n\r\n###Paid\r\n\r\n* [Intel® VTune™](https://software.intel.com/en-us/intel-vtune-amplifier-xe)\r\n* [AQtime Pro, from SmartBear](https://smartbear.com/product/aqtime-pro/overview/)\r\n* [GlowCode](http://www.glowcode.com/summary1_gc.htm)\r\n\r\n\r\n##Libraries\r\n\r\n* [Celero micro-benchmarking library](https://github.com/DigitalInBlue/Celero)\r\n* [Nonius library](https://nonius.io)\r\n* [Hayai micro benchmarking library](https://github.com/nickbruun/hayai), [into article](https://bruun.co/2012/02/07/easy-cpp-benchmarking)\r\n* [Google benchmark library](https://github.com/google/benchmark)\r\n\r\n##Books\r\n\r\n* [PDF: optimizing C++](http://www.agner.org/optimize/optimizing_cpp.pdf) - by Agner Fog. FREE\r\n* [Optimizing C++, WikiBooks](https://en.wikibooks.org/wiki/Optimizing_C%2B%2B) - FREE\r\n* The Software Optimization Cookbook: High Performance Recipes for IA-32 Platforms, 2nd Edition\r\n* Video Game Optimization, Eric Preisz\r\n* Optimized C++: Proven Techniques for Heightened Performance, Kurt Guntheroth\r\n* Power and Performance: Software Analysis and Optimization, Jim Kukunas\r\n* Systems Performance: Enterprise and the Cloud, Brendan Gregg \r\n* Every Computer Performance Book, Bob Wescott \r\n\r\n##About\r\nThis list was started by Bartlomiej Filipek ([@fenbf](https://twitter.com/fenbf)). If you like to help please read CONTRIBUTING.md instructions and just make a pull request to this repo.\r\n\r\n##License\r\n\r\n[![Creative Commons License](http://i.creativecommons.org/l/by/4.0/88x31.png)](http://creativecommons.org/licenses/by/4.0/)\r\n\r\nThis work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}